<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Learning in public</title>
    <link>https://aasa.dev/</link>
    <description>Recent content on Learning in public</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Feb 2021 14:09:35 +0100</lastBuildDate><atom:link href="https://aasa.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Plantuml from Vim</title>
      <link>https://aasa.dev/posts/vim-plantuml/</link>
      <pubDate>Fri, 12 Feb 2021 14:09:35 +0100</pubDate>
      
      <guid>https://aasa.dev/posts/vim-plantuml/</guid>
      <description>Creating diagrams is a great way to communicate with others. Writing in vim is a great way to communicate with yourself.
Combine them and it&amp;rsquo;s just great!
The resulting workflow: Just open a plantuml file and use :PlantumlOpen to launch a live reloading browser with the preview.
Pre-requisite software:
 plantuml  Required plugins:
Plug &amp;#39;aklt/plantuml-syntax&amp;#39; &amp;#34; syntax hl for pumlPlug &amp;#39;tyru/open-browser.vim&amp;#39; &amp;#34; hooks for opeing browserPlug &amp;#39;weirongxu/plantuml-previewer.vim&amp;#39; &amp;#34; previewerIf you (like me) just love some ascii art, use the entr or similar here:</description>
    </item>
    
    <item>
      <title>Til Pipe Into Vim</title>
      <link>https://aasa.dev/posts/til-pipe-into-vim/</link>
      <pubDate>Wed, 09 Dec 2020 13:22:11 +0100</pubDate>
      
      <guid>https://aasa.dev/posts/til-pipe-into-vim/</guid>
      <description>Pipe text into Vim
docker exec containername cat /etc/nginx/conf.d/nginx.conf | vim - </description>
    </item>
    
    <item>
      <title>Analyzing Disk-IO</title>
      <link>https://aasa.dev/posts/analyzing-disk-io/</link>
      <pubDate>Fri, 20 Nov 2020 06:14:41 +0100</pubDate>
      
      <guid>https://aasa.dev/posts/analyzing-disk-io/</guid>
      <description>Sneaking suspicion </description>
    </item>
    
    <item>
      <title>Events in Browser</title>
      <link>https://aasa.dev/posts/events-in-browser/</link>
      <pubDate>Mon, 26 Oct 2020 07:54:33 +0100</pubDate>
      
      <guid>https://aasa.dev/posts/events-in-browser/</guid>
      <description>What we tried
grpc web streaming
grpc streams are shit why
polling rocks
what we should maybe try instead
stomp roll ur own
experiments
Streaming RPCs (Unary)11MsgMethod+HeadersHalf closeClientServerMsgStatus+TrailersHeaders
Streaming RPCs (Streaming)12MsgMsgMsgMethod+HeadersHalf closeClientServerMsgMsgMsgStatus+TrailersHeaders Streaming RPCsrpc UnaryCall (Request) returns (Response);rpc ClientStreamingCall(stream Request) returns (Response);rpc ServerStreamingCall (Request) returns (stream Response);rpc BidirectionalCall(stream Request) returns (stream Response);13
Streaming RPCs14Bidirectional (Bidi) Streaming
 Half duplex. Client-streaming + Server-streaming Full duplex. More that one side can send at a time Like TCP, but with messages instead of bytes(close semantics are a bit different, though) No implicit acks; writes are only acked by responses  OverviewLong-lived RPCsStreaming RPCs</description>
    </item>
    
    <item>
      <title>Log Aggregation 2019</title>
      <link>https://aasa.dev/posts/log-aggregation-2019/</link>
      <pubDate>Fri, 07 Jun 2019 05:45:14 +0200</pubDate>
      
      <guid>https://aasa.dev/posts/log-aggregation-2019/</guid>
      <description>Overview of log aggregation options in 2019.</description>
    </item>
    
    <item>
      <title>Initial commit</title>
      <link>https://aasa.dev/posts/initial-commit/</link>
      <pubDate>Sun, 02 Jun 2019 21:02:01 +0200</pubDate>
      
      <guid>https://aasa.dev/posts/initial-commit/</guid>
      <description>Blog efficently - workflow for writing in public with ease.
Setup My requirements are:
 Control the whole process from the command line Write in markdown No server management Custom domain name  Requirements 1-3 are easily satisfied by hugo.
Hugo supports rendering on github pages: https://gohugo.io/hosting-and-deployment/hosting-on-github/
CLI deployment Quoted from https://gohugo.io/hosting-and-deployment/hosting-on-github/
 Create a (e.g. blog) repository on GitHub. This repository will contain Hugoâ€™s content and other source files. Create a .</description>
    </item>
    
  </channel>
</rss>
